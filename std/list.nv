module List

import core

fn extends clear(list: [$T]) {
    list = []: $T
}

fn extends __eq__(a: [$T], b: [$T]) -> Bool {
    if a.len() != b.len() {
        return false
    }
    for i in 0..a.len() {
        if a[i] != b[i] {
            return false
        }
    }
    return true
}

fn extends dropIndex(list: [$T], index: Int) -> [$T] {
    let result = []: $T
    for i in 0..list.len() {
        if i != index {
            result.push(list[i])
        }
    }
    return result
}

fn extends fill(list: [$A], input: $A, ammount: Int) -> [$A] {
    for let i = 0; i < ammount; i += 1 {
        list.push(input)
    }
    return list
}

fn extends map(list: [$A], f: fn($A) -> $B) -> [$B] {
    let result = []:$B
    for x in list {
        result.push(f(x))
    }
    return result
}

fn extends flatmap(list: [$T], f: fn($T) -> [$U]) -> [$U] {
    let result = []:$U
    for x in list {
        for y in f(x) {
            result.push(y)
        }
    }
    return result
}

fn extends filter(list: [$A], f: fn($A) -> Bool) -> [$A] {
    let result = []:$A
    for x in list {
        if f(x) {
            result.push(x)
        }
    }
    return result
}

fn extends foreach(list: [$A], f: fn($A)) {
    for x in list {
        f(x)
    }
}

fn extends indexOf(arr: [$K], k: $K) -> Int {
    let index = 0
    for let i = 0; i < arr.len(); i += 1 {
        if arr[i] == k {
            return index;
        }
        index += 1;
    }
    return -1;
}

fn extends flatten(input: [[$T]]) -> [$T] {
    let result = []: $T
    for i in input {
        for c in i {
            result.push(c)
        }
    }
    return result
}

fn extends reduce(input: [$T], f: fn($A,$T,Int) -> $A, initial: $A) -> $A {
    let result = initial
    for let i = 0; i < input.len(); i += 1 {
        result = f(result,input[i],i)
    }
    return result
}


fn extends split(input: [$T], delim: $T) -> [[$T]] {
    let result = []: [$T]
    let current = []: $T
    for c in input {
        if c == delim {
            if current.len() > 0 {
                result.push(clone(current))
                current = []: $T
            }
        } else {
            current.push(c)
        }
    }
    result.push(clone(current))
    return result
}

fn extends splitWith(input: [Char], delim: Char, f: fn([Char]) -> Option($T)) -> [$T] {
    let result = []: [$T]
    let current = []: Char
    for c in input {
        if c == delim {
            if let y = f(current) {
                result.push([y])
            }
            current = []: Char
        } else {
            current.push(c)
        }
    }
    if let y = f(current) {
        result.push([y])
    }
    return result.flatten()
}

fn extends splitWhen(input: [$T], f: fn($T) -> Bool) -> [[$T]] {
    let result = []: [$T]
    let current = []: $T
    for c in input {
        if f(c) {
            result.push(clone(current))
            current = []: $T
        } else {
            current.push(c)
        }
    }
    result.push(clone(current))
    return result
}

fn extends sortWith(input: [$T], f: fn($T,$T) -> Bool) -> [$T] {
    let result = input
    for let i = 0; i < result.len(); i += 1 {
        for let j = i + 1; j < result.len(); j += 1 {
            if f(result[i],result[j]) {
                let temp = result[i]
                result[i] = result[j]
                result[j] = temp
            }
        }
    }
    return result
}
fn extends bubblesort(input: [Int]) -> [Int] {
    let result = input
    for let i = 0; i < result.len(); i += 1 {
        for let j = i + 1; j < result.len(); j += 1 {
            if result[i] > result[j] {
                let temp = result[i]
                result[i] = result[j]
                result[j] = temp
            }
        }
    }
    return result
}

fn extends append(input: [$T], arraytwo: [$T]) -> [$T] {
  for let i = 0; i < arraytwo.len(); i += 1 {
    input.push(arraytwo[i])
  }
  return clone(input)
}

fn extends concat(list1: [$T], list2: [$T]) -> [$T] {
    let result = []: $T
    for x in list1 {
        result.push(x)
    }
    for x in list2 {
        result.push(x)
    }
    return result
}

fn extends quicksort(array: [Int]) -> [Int] {
  if array.len() < 2 {
    return array
  }

  let pivot = array[array.len() / 2]
    
  let left = []:Int
  let right = []:Int
  let equal = []:Int

  for let i = 0; i < array.len(); i += 1 {
    
    if array[i] < pivot {
      left.push(array[i])
    } elif array[i] > pivot {
      right.push(array[i])
    } else {
      equal.push(array[i])
    }
  }

  left = left.quicksort()
  right = right.quicksort()

  return left.append(equal).append(right)
}

fn extends foldl(input: [$T], f: fn($T,$T) -> $T) -> $T {
    let result = clone(input[0])
    for let i = 1; i < input.len(); i += 1 {
        result = f(result,input[i])
    }
    return result
}

fn extends foldr(input: [$T], f: fn($T,$T) -> $T) -> $T {
    let result = clone(input[input.len()-1])
    for let i = input.len()-2; i >= 0; i -= 1 {
        result = f(input[i],result)
    }
    return result
}

fn extends slice(input: [$T], start: Int, end: Int) -> [$T] {
    let result = []: $T
    if start < 0 || end > input.len() {
        return []: $T
    }
    for let i = start; i < end; i += 1 {
        result.push(input[i])
    }
    return result
}

fn extends chunk(input: [$T], size: Int) -> [[$T]] {
    let result = []: [$T]
    for let i = 0; i < input.len(); i += size {
        result.push(input.slice(i,i+size))
    }
    return result
}

fn extends sum(input: [Int]) -> Int {
    let result = 0
    for let i = 0; i < input.len(); i += 1 {
        result += input[i]
    }
    return result
}

fn extends sum(input: [Float]) -> Float {
    let result = 0.0
    for let i = 0; i < input.len(); i += 1 {
        result += input[i]
    }
    return result
}


fn extends product(input: [Int]) -> Int {
    let result = 1
    for let i = 0; i < input.len(); i += 1 {
        result = result * input[i]
    }
    return result
}

fn extends max(input: [Int]) -> Int {
    let result = input[0]
    for let i = 1; i < input.len(); i += 1 {
        if input[i] > result {
            result = input[i]
        }
    }
    return result
}

fn extends min(input: [Int]) -> Int {
    let result = input[0]
    for let i = 1; i < input.len(); i += 1 {
        if input[i] < result {
            result = input[i]
        }
    }
    return result
}

fn extends all(input: [Bool]) -> Bool {
    for let i = 0; i < input.len(); i += 1 {
        if !input[i] {
            return false
        }
    }
    return true
}

fn extends any(input: [Bool]) -> Bool {
    for let i = 0; i < input.len(); i += 1 {
        if input[i] {
            return true
        }
    }
    return false
}

fn extends zip(input: [$A], input2: [$B]) -> [($A,$B)] {
    let result = []: ($A,$B)
    for let i = 0; i < input.len(); i += 1 {
        result.push((input[i],input2[i]))
    }
    return result
}

fn extends unzip(input: [($A,$B)]) -> ([$A],[$B]) {
    let result = []: $A
    let result2 = []: $B
    for let i = 0; i < input.len(); i += 1 {
        result.push(input[i][0])
        result2.push(input[i][1])
    }
    return (result,result2)
}

fn extends reverse(input: [$T]) -> [$T] {
    let result = []: $T
    for let i = input.len()-1; i >= 0; i -= 1 {
        result.push(input[i])
    }
    return result
}

fn extends unique(input: [$T]) -> [$T] {
    let result = []: $T
    for let i = 0; i < input.len(); i += 1 {
        if result.indexOf(input[i]) == -1 {
            result.push(input[i])
        }
    }
    return result
}

fn extends contains(input: [$T], value: $T) -> Bool {
    for let i = 0; i < input.len(); i += 1 {
        if input[i] == value {
            return true
        }
    }
    return false
}

fn extends windows(input: [$T], size: Int) -> [[$T]] {
    let result = []: [$T]
    for let i = 0; i < input.len() - size + 1; i += 1 {
        result.push(input.slice(i,i+size))
    }
    return result
}

fn extends mapWhile(list: [$A], f: fn($A) -> Option($B)) -> [$B] {
    let result = []:$B
    for x in list {
        if let y = f(x) {
            result.push(y)
        } else {
            break
        }
    }
    return result
}

fn extends find(input: [$T], f: fn($T) -> Bool) -> Option($T) {
    for let i = 0; i < input.len(); i += 1 {
        if f(input[i]) {
            return Some(input[i])
        }
    }
    return None($T)
}

fn extends filterMap(input: [$A], f: fn($A) -> Option($B)) -> [$B] {
    let result = []:$B
    for x in input {
        if let y = f(x) {
            result.push(y)
        }
    }
    return result
}

fn extends filterEmpty(input: [[$T]]) -> [[$T]] {
    let result = []:[$T]
    for x in input {
        if x.len() > 0 {
            result.push(x)
        }
    }
    return result
}

fn extends count(input: [$T], f: fn($T) -> Bool) -> Int {
    let result = 0
    for x in input {
        if f(x) {
            result += 1
        }
    }
    return result
}

fn extends isEmpty(input: [$T]) -> Bool {
    return input.len() == 0
}

fn extends take(input: [$T], n: Int) -> [$T] {
    return input.slice(0,n)
}

fn extends drop(input: [$T], n: Int) -> [$T] {
    return input.slice(n,input.len())
}

fn extends takeWhile(input: [$T], f: fn($T) -> Bool) -> [$T] {
    let result = []:$T
    for x in input {
        if f(x) {
            result.push(x)
        } else {
            break
        }
    }
    return result
}

fn extends dropWhile(input: [$T], f: fn($T) -> Bool) -> [$T] {
    let result = []:$T
    let found = false
    for x in input {
        if !found && f(x) {
            continue
        }
        found = true
        result.push(x)
    }
    return result
}

fn extends partition(input: [$T], f: fn($T) -> Bool) -> ([$T],[$T]) {
    let left = []:$T
    let right = []:$T
    for x in input {
        if f(x) {
            left.push(x)
        } else {
            right.push(x)
        }
    }
    return (left,right)
}
fn extends groupBy(input: [$T], f: fn($T) -> $K) -> [($K,[$T])] {
    let result = []: ($K,[$T])
    for x in input {
        let key = f(x)
        let found = false
        for let i = 0; i < result.len(); i += 1 {
            if result[i][0] == key {
                result[i][1].push(x)
                found = true
                break
            }
        }
        if !found {
            result.push((key,[x]))
        }
    }
    return result
}

fn extends group(input: [$T]) -> [($T,Int)] {
    let result = []: ($T,Int)
    for x in input {
        let found = false
        for let i = 0; i < result.len(); i += 1 {
            if result[i][0] == x {
                result[i] = (x,result[i][1]+1)
                found = true
                break
            }
        }
        if !found {
            result.push((x,1))
        }
    }
    return result
}

fn extends compare(list: [$T], list2: [$T]) -> [($T,Int,Int)] {
    let grouped = list.group()
    let grouped2 = list2.group()
    let result = []: ($T,Int,Int)
    for x in grouped {
        for y in grouped2 {
            if x[0] == y[0] {
                result.push((x[0],x[1],y[1]))
            }
        }
    }
    return result
}

fn extends zipWith(input: [$A], input2: [$B], f: fn($A,$B) -> $C) -> [$C] {
    let result = []:$C
    for let i = 0; i < input.len(); i += 1 {
        result.push(f(input[i],input2[i]))
    }
    return result
}

fn extends unzipWith(input: [$A], f: fn($A) -> ($B,$C)) -> ([$B],[$C]) {
    let result = []: $B
    let result2 = []: $C
    for x in input {
        let y = f(x)
        result.push(y[0])
        result2.push(y[1])
    }
    return (result,result2)
}

fn extends truncate(input: [$T], n: Int) -> [$T] {
    return input.slice(0,input.len()-n)
}

fn extends intersperse(input: [$T], delim: $T) -> [$T] {
    let result = []:$T
    for let i = 0; i < input.len(); i += 1 {
        result.push(input[i])
        if i != input.len()-1 {
            result.push(delim)
        }
    }
    return result
}

fn extends last(input: [$T]) -> Option($T) {
    if input.len() == 0 {
        return None($T)
    }
    return Some(input[input.len()-1])
}

fn extends anyWith(input: [$T], f: fn($T) -> Bool) -> Bool {
    for x in input {
        if f(x) {
            return true
        }
    }
    return false
}

fn extends allWith(input: [$T], f: fn($T) -> Bool) -> Bool {
    for x in input {
        if !f(x) {
            return false
        }
    }
    return true
}

fn extends dropFirst(input: [$T], f: fn($T) -> Bool) -> [$T] {
    let result = []:$T
    let found = false
    for x in input {
        if !found && f(x) {
            found = true
            continue
        }
        result.push(x)
    }
    return result
}

fn extends indices(input: [$T]) -> [Int] {
    let result = []: Int
    for let i = 0; i < input.len(); i += 1 {
        result.push(i)
    }
    return result
}

fn extends shuffle(input: [$T]) -> [$T] {
    let result = clone(input)
    for let i = 0; i < result.len(); i += 1 {
        let random = random(i,result.len() - 1)
        let temp = result[i]
        result[i] = result[random]
        result[random] = temp
    }
    return result
}

fn extends get(input: [$T], index: Int) -> Option($T) {
    if (index < 0) || (index >= input.len()) {
        return None($T)
    }
    return Some(input[index])
}

fn extends enumurate(input: [$T]) -> [($T,Int)] {
    let result = []: ($T,Int)
    for let i = 0; i < input.len(); i += 1 {
        result.push((input[i],i))
    }
    return result
}

fn extends join(input: [$T], delim: $T) -> [$T] {
    let result = []:$T
    for let i = 0; i < input.len(); i += 1 {
        result.push(input[i])
        if i != input.len()-1 {
            result.push(delim)
        }
    }
    return result
}

fn extends anyIn(input: [$T], values: [[$T]]) -> Bool {
    for x in values {
        if input == x {
            return true
        }
    }
    return false
}

// matrix 

fn extends allRotations(matrix: [[$T]], x_index: Int, y_index: Int, length: Int) -> [[$T]] {
    let result = []: [$T]
    let section = []: $T
    for i in 0..length {
        if x_index + i >= matrix[0].len() {
            break
        }
        section.push(matrix[y_index][x_index + i])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if y_index + i >= matrix.len() {
            break
        }
        section.push(matrix[y_index + i][x_index])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if x_index - i < 0 {
            break
        }
        section.push(matrix[y_index][x_index - i])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if y_index - i < 0 {
            break
        }
        section.push(matrix[y_index - i][x_index])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if (y_index - i < 0) || (x_index + i >= matrix[0].len()) {
            break
        }
        section.push(matrix[y_index - i][x_index + i])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if (y_index + i >= matrix.len()) || (x_index + i >= matrix[0].len() ){
            break
        }
        section.push(matrix[y_index + i][x_index + i])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if (y_index + i >= matrix.len()) || (x_index - i < 0) {
            break
        }
        section.push(matrix[y_index + i][x_index - i])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if (y_index - i < 0) || (x_index - i < 0) {
            break
        }
        section.push(matrix[y_index - i][x_index - i])
    }
    result.push(clone(section))
    return result
}

// diagonal stencil, from middle out 
fn extends diagonalStencil(matrix: [[$T]], x_index: Int, y_index: Int, length: Int) -> [[$T]] {
    let result = []: [$T]
    let section = []: $T
    for i in 0..length {
        if (y_index - i < 0) || (x_index + i >= matrix[0].len()) {
            break
        }
        section.push(matrix[y_index - i][x_index + i])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if (y_index + i >= matrix.len()) || (x_index + i >= matrix[0].len()) {
            break
        }
        section.push(matrix[y_index + i][x_index + i])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if (y_index + i >= matrix.len()) || (x_index - i < 0) {
            break
        }
        section.push(matrix[y_index + i][x_index - i])
    }
    result.push(clone(section))
    section = []: $T
    for i in 0..length {
        if (y_index - i < 0) || (x_index - i < 0) {
            break
        }
        section.push(matrix[y_index - i][x_index - i])
    }
    result.push(clone(section))
    return result
}

// bitmask

struct Bitmask {
    data: [Int]
}

fn extends bitmask(input: [$T], f: fn($T) -> Bool) -> Bitmask {
    let result = []: Int
    for x in input {
        if f(x) {
            result.push(1)
        } else {
            result.push(0)
        }
    }
    return Bitmask{data: result}
}

fn extends mask(input: [Int]) -> Bitmask {    
    let result = []: Int
    for x in input {
        if x == 1 {
            result.push(1)
        } else {
            result.push(0)
        }
    }
    return Bitmask{data: result}
}

fn extends inverse(input: Bitmask) -> Bitmask {
    let result = []: Int
    for x in input.data {
        if x == 1 {
            result.push(0)
        } else {
            result.push(1)
        }
    }
    return Bitmask{data: result}
}

fn extends selection(input: [$T], mask: Bitmask) -> [$T] {
    let result = []: $T
    for let i = 0; i < input.len(); i += 1 {
        if mask.data[i] == 1 {
            result.push(input[i])
        }
    }
    return result
}

fn extends membership(input: [$T], elements: [$T]) -> Bitmask {
    let result = []: Int
    for x in input {
        if elements.contains(x) {
            result.push(1)
        } else {
            result.push(0)
        }
    }
    return Bitmask{data: result}
}