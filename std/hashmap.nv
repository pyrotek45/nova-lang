module hashmap

import list
import core

struct HashMap(K,V) {
    keys: [$K],
    values: [$V],
}

fn extends toString(self: HashMap($K,$V)) -> String {
    let result = "{"
    for let i = 0; i < self.keys.len(); i += 1 {
        result += Cast::string(self.keys[i]) + " => " + Cast::string(self.values[i])
        if i != self.keys.len() - 1 {
            result += ", "
        }
    }
    result += "}"
    return result
}

fn  extends(HashMap) default() -> HashMap($K,$V) {
    return HashMap {
        keys: []:$K,
        values: []:$V,
    }
}

fn extends insert(self: HashMap($K,$V), k: $K, v: $V) {
    for key in self.keys {
        if key == k {
            self.values[List::indexOf(self.keys, key)] = v;
            return;
        }
    }
    self.keys.push(k)
    self.values.push(v)
}

fn extends get(self: HashMap($K,$V), k: $K) -> Option($V) {
    for key in self.keys {
        if key == k {
            return self.values[List::indexOf(self.keys, key)];
        }
    }
    return None($V)
}

fn extends delete(self: HashMap($K,$V), k: $K) {
    let index = List::indexOf(self.keys, k)
    if index != -1 {
        self.keys.remove(index)
        self.values.remove(index)
    }
}

fn extends has(self: HashMap($K,$V), k: $K) -> Bool {
    for key in self.keys {
        if key == k {
            return true
        }
    }
    return false
}