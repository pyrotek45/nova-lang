module iter

import core

struct Iter(A) {
    next: fn() -> Option($A)
}

fn extends next(it: Iter($A)) -> Option($A) {
    return it.next()
}

fn extends(Iter) fromRange(start: Int, end: Int) -> Iter(Int) {
    let index = Box(start)  
    return Iter(fn() -> Option(Int) {
        if index.value >= end {
            return None(Int)
        } else {
            let result = Some(index.value);
            index.value += 1
            return result
        }
    })
}

fn extends toString(it: Iter($A)) -> String {
    return "Iter"
}

fn extends(Iter) fromVec(input: [$A]) -> Iter($A) {
    let index = Box(0)  
    return Iter(fn() -> Option($A) {
        if index.value >= input.len() {
            return None($A)
        } else {
            let result = Some(input[index.value]);
            index.value += 1
            return result
        }
    })
}

fn extends(Iter) enumerate(it: Iter($A)) -> Iter((Int,$A)) {
    let index = Box(0)  
    return Iter(fn() -> Option((Int,$A)) {
        let t = it::next()
        if t.isSome() {
            let result = (index.value, t.unwrap())
            index.value += 1
            return Some(result)
        } else {
            return None((Int,$A))
        }
    })
}

fn extends(Iter) fromFn(input: fn() -> Option($A)) -> Iter($A) {
    return Iter(input)
}

fn extends filter(it: Iter($A), f: fn($A) -> Bool) -> Iter($A) {
    return Iter(fn() -> Option($A) {
        let t = it::next()
        while t.isSome() {
            if f(t.unwrap()) {
                return t
            }
            t = it::next() 
        }
        return None($A)
    })
}

fn extends map(it: Iter($A), f: fn($A) -> $B) -> Iter($B) {
    return Iter(fn() -> Option($B) {
        let t = it::next() 
        if t.isSome() {
            return Some(f(t.unwrap()))
        } else {
            return None($B)
        }
    })
}

fn extends show(it: Iter($A)) {
    let t: Option($A) = it::next() 
    while t.isSome() {
        println(t.unwrap())
        t = it::next() 
    }
}

fn extends collect(it: Iter($A)) -> [$A] {
    let t: Option($A) = it::next() 
    let list = []:$A
    while t.isSome() {
        list.push(t.unwrap())
        t = it::next() 
    }
    return list
}