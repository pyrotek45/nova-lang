module core

struct Box(A) {
    value: $A
}

fn extends toString(self: Box($A)) -> String {
    return Cast::string(self.value)
}

fn extends show(self: Box($A)) {
    println(Cast::string(self.value))
}

fn Gen(start: Int) -> fn() -> Int {
    let i = Box(start)
    return || {
        i.value += 1
        i.value - 1
    }
}

// built in Option type 

fn extends orError(self: Option($A), msg: String) -> $A {
    if self.isSome() {
        return self.unwrap()
    }
    println(msg)
    exit()
    return unreachable() @[T: $A]
}

fn extends orDefault(self: Option($A), default: $A) -> $A {
    if self.isSome() {
        return self.unwrap()
    }
    return default
}

fn extends orDoFn(self: Option($A), f: fn() -> $A) -> $A {
    if self.isSome() {
        return self.unwrap()
    }
    return f()
}

fn extends isNone(self: Option($A)) -> Bool {
    return !self.isSome()
}

// Maybe type

enum Maybe(A) {
    Just: $A,
    Nothing
}

fn extends toMaybe(self: Option($A)) -> Maybe($A) {
    if self.isSome() {
        return Maybe::Just(self.unwrap())
    }
    return Maybe::Nothing() @[A: $A]
}

fn extends isJust(self: Maybe($A)) -> Bool {
    match self {
        Just(x) => {return true}
        Nothing() => {return false}
    }
    return false
}

fn extends toString(self: Maybe($A)) -> String {
    let result = ""
    match self {
        Just(x) => {result = "Just(" + Cast::string(x) + ")"}
        Nothing() => {result = "Nothing"}
    }
    return result
}

// result type

enum Result(A, B) {
    Ok: $A,
    Err: $B
}

fn extends isOk(self: Result($A, $B)) -> Bool {
    match self {
        Ok(x) => {return true}
        Err(x) => {return false}
    }
    return false
}

fn extends toResult(self: Option($A), err: $B) -> Result($A, $B) {
    if self.isSome() {
        return Result::Ok(self.unwrap())
    }
    return Result::Err(err)
}

fn extends toString(self: Result($A, $B)) -> String {
    let result = ""
    match self {
        Ok(x) => {result = "Ok(" + Cast::string(x) + ")"}
        Err(x) => {result = "Err(" + Cast::string(x) + ")"}
    }
    return result
}
// basic list functions

fn extends iota(n: Int) -> [Int] {
    let result = []: Int
    for let i = 0; i < n; i += 1 {
        result.push(i)
    }
    return result
}

fn extends toStep(start: Int, end: Int, step: Int) -> [Int] {
    let result = []: Int
    for let i = start; i < end; i += step {
        result.push(i)
    }
    return result
}

fn extends to(self: Int, end: Int) -> [Int] {
    let result = []: Int
    for let i = self; i < end; i += 1 {
        result.push(i)
    }
    return result
}

// Core functions // like pythons basic functions

fn range(start: Int, end: Int) -> [Int] {
    let result = []: Int
    for let i = start; i < end; i += 1 {
        result.push(i)
    }
    return result
}

fn range(end: Int) -> [Int] {
    return range(0, end)
}
