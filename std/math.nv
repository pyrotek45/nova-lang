module math

fn extends min(self: Int, other: Int) -> Int {
    if self < other {
        return self
    }
    return other
}

fn extends max(self: Int, other: Int) -> Int {
    if self > other {
        return self
    }
    return other
}

fn extends abs(self: Int) -> Int {
    if self < 0 {
        return -self
    }
    return self
}

fn extends pow(self: Int, other: Int) -> Int {
    let result = 1
    for let i = 0; i < other; i += 1 {
        result = result * self
    }
    return result
}

// approximation method to calculate square root
// sorry if it's not 100% accurate
fn extends sqrt(self: Float) -> Float {
    let x = Cast::float(self).unwrap()
    let y = (x + 1.0) / 2.0

    while y < x {
        x = y
        y = (x + Cast::float(self).unwrap() / x) / 2.0
    }

    return x
}

fn extends sqrt(self: Int) -> Float {
    return Cast::float(self).unwrap().sqrt()
}

// limit a value between a minimum and a maximum value
fn extends clamp(self: Int, min: Int, max: Int) -> Int {
    if self < min {
        return min
    }
    
    if self > max {
        return max
    }

    return self
}

// calculate the factorial of a number
fn extends factorial(self: Int) -> Int {
    let result = 1

    for let i = 2; i <= self; i += 1 {
        result = result * i
    }

    return result
}

// calculate the greatest common divisor
fn extends gcd(self: Int, other: Int) -> Int {
    let a = self.abs()
    let b = other.abs()

    while b != 0 {
        let temp = b
        b = a % b
        a = temp
    }

    return a
}

// calculate the least common multiple
fn extends lcm(self: Int, other: Int) -> Int {
    return (self * other).abs() / self.gcd(other)
}

// exponentiate a floating point number
// it uses approximation so don't rely on this for
// precise results
fn extends exp(self: Float) -> Float {
    let result = 1.0
    let term = 1.0

    for let n = 1.0; n < 20.0; n += 1.0 {
        term = term * self / n
        result = result + term
    }

    return result
}

fn bin(n: Int) -> String {
    if n < 0 {
        return "-" + bin(-n)
    }
    let result = ""
    let i = n
    while i > 0 {
        result = Cast::string(i % 2) + result
        i = i / 2
    }
    return result
}

fn divmod(n: Int, d: Int) -> (Int, Int) {
    return (n / d, n % d)
}

fn round(n: Float) -> Int {
    // since its a Float, should be safe to cast
    return Cast::int(n + 0.5).unwrap()
}